--------------------------------------------------------------------
理解type与object的关系关键是区分 类型 与 类类型的继承

所有的东西都是对象 包括type

所有的对象都由type创建 object自然是type创建

所有的新式类都是一种type

继承体系下所有对象的根都是object  type的根也是object
   type也是一种class 因此type有父类型object

__class__属性指的是类型 这里很容易望文生义理解为java里面的那个.Class
__bases__属性指的才是继承


--------------------------------------------------------------------

python中的多继承下继承顺序问题

--------------------------------------------------------------------
python __init__ 与 __new__问题
元类为什么要继承自type
重要区分： 元类是控制type创建类的行为，而不是类创建对象的行为
实际上元类控制创建类行为是使用__new__方法，而该方法继承自type。
实际上所有的对象都是type创建，类是对象，类实例也是对象。那么类创建对象的时候怎么更改默认行为呢？

因为类创建对象也是用type所以，这个更改貌似也应该用元类，只不过最后返回的东西不一样

type.__new__与type()的区别 目前已知二者接受的参数不一样，返回的类型不一样

--------------------------------------------------------------------

元类的使用场景：首先，元类不是反射，反射是从类与对象的外部操纵对象，而元类必须被声明在类的内部。
那么元类是负责类的创建活动。那么所有这个类的创建活动包括其子类的创建活动都被监视了，类的创建包括处理
属性和方法，那么元类就可以对所有这些类的方法和属性做添加、删除或校验规范性。其实如果仅仅是对当前类使用
元类的话，一般有其他替代方法，但是如果对该类的所有子类的创建活动进行监视的话，元类是最好的方法。
java中因为类加载器的存在，这部分监视活动自然转移到类加载器上了。但是java的类加载器可以挂钩子吗？
--------------------------------------------------------------------
